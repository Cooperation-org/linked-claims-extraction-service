---
- name: Deploy Linked Claims Extraction Service
  hosts: webservers
  become: yes
  vars_files:
    - ../group_vars/webservers.yml
  
  tasks:
    # ===== SYSTEM DEPENDENCIES =====
    - name: Check if PostgreSQL is already installed
      command: which psql
      register: postgres_check
      failed_when: false
      changed_when: false

    - name: Install system dependencies (without PostgreSQL if already exists)
      apt:
        name:
          - python3
          - python3-venv
          - python3-dev
          - python3-pip
          - python3-psycopg2
          - redis-server
          - supervisor
          - nginx
          - git
          - build-essential
          - libpq-dev
          - certbot
          - python3-certbot-nginx
        state: present
        update_cache: yes

    - name: Install PostgreSQL only if not present
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present
      when: postgres_check.rc != 0

    # ===== DATABASE SETUP =====
    - name: Ensure PostgreSQL is running
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Ensure Redis is running
      systemd:
        name: redis-server
        state: started
        enabled: yes

    - name: Create PostgreSQL database user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present
        login_host: "{{ db_host | default('localhost') }}"
        login_user: "{{ db_admin_user | default('postgres') }}"
        login_password: "{{ db_admin_password }}"
      become: yes

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        state: present
        login_host: "{{ db_host | default('localhost') }}"
        login_user: "{{ db_admin_user | default('postgres') }}"
        login_password: "{{ db_admin_password }}"
      become: yes

    - name: Grant all privileges on database to user
      postgresql_privs:
        db: "{{ db_name }}"
        role: "{{ db_user }}"
        type: database
        privs: ALL
        login_host: "{{ db_host | default('localhost') }}"
        login_user: "{{ db_admin_user | default('postgres') }}"
        login_password: "{{ db_admin_password }}"
      become: yes

    # ===== APPLICATION USER =====
    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    # ===== CODE DEPLOYMENT =====
    - name: Pull latest code
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}"
        version: "{{ git_branch | default('main') }}"
        accept_hostkey: yes
        force: yes
      become_user: "{{ app_user }}"
      register: git_result
      tags: update

    - name: Create virtual environment
      command: "python3 -m venv {{ app_dir }}/venv"
      args:
        creates: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"

    - name: Copy .env file with database config
      template:
        src: env-with-db.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      register: env_result
      tags: update

    - name: Install/Update Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
        virtualenv_python: python3
      become_user: "{{ app_user }}"
      when: git_result.changed or env_result.changed
      tags: update

    - name: Create uploads directory
      file:
        path: "{{ app_dir }}/src/uploads"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    # ===== DATABASE MIGRATIONS =====
    - name: Initialize/Update database with Flask-Migrate
      shell: |
        cd {{ app_dir }}
        . venv/bin/activate
        export FLASK_APP=src/app.py
        flask db init || true
        flask db migrate -m "Auto migration" || true
        flask db upgrade
      args:
        executable: /bin/bash
      become_user: "{{ app_user }}"
      environment:
        DATABASE_URL: "postgresql://{{ db_user }}:{{ db_password }}@localhost/{{ db_name }}"
      when: git_result.changed or env_result.changed
      tags: update

    # ===== SUPERVISOR CONFIGURATION =====
    - name: Deploy supervisor configuration for Flask app
      template:
        src: supervisor-flask.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}.conf
        owner: root
        group: root
        mode: '0644'
      register: supervisor_flask

    - name: Deploy supervisor configuration for Celery worker
      template:
        src: supervisor-celery.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}-celery.conf
        owner: root
        group: root
        mode: '0644'
      register: supervisor_celery

    - name: Reread supervisor configs
      command: supervisorctl reread
      when: supervisor_flask.changed or supervisor_celery.changed
      
    - name: Update supervisor
      command: supervisorctl update
      when: supervisor_flask.changed or supervisor_celery.changed

    - name: Restart Flask app if code or config changed
      supervisorctl:
        name: "{{ app_name }}"
        state: restarted
      when: git_result.changed or env_result.changed or supervisor_flask.changed
      tags: update

    - name: Restart Celery worker if code or config changed
      supervisorctl:
        name: "{{ app_name }}-celery"
        state: restarted
      when: git_result.changed or env_result.changed or supervisor_celery.changed
      tags: update

    # ===== SSL CERTIFICATE =====
    - name: Check if SSL certificate already exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
      register: ssl_cert

    - name: Create webroot directory for ACME challenge
      file:
        path: /var/www/letsencrypt
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Deploy Nginx configuration (HTTP for initial cert)
      template:
        src: nginx-site-http.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: not ssl_cert.stat.exists

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}"
        state: link

    - name: Test nginx configuration
      command: nginx -t
      changed_when: false

    - name: Reload nginx for ACME challenge
      service:
        name: nginx
        state: reloaded

    - name: Obtain SSL certificate using webroot
      command: >
        certbot certonly
        --webroot
        --webroot-path /var/www/letsencrypt
        --non-interactive
        --agree-tos
        --email {{ admin_email }}
        -d {{ domain_name }}
        --keep-until-expiring
      when: not ssl_cert.stat.exists
      register: certbot_result

    - name: Deploy HTTPS nginx configuration
      template:
        src: nginx-site-https.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: ssl_cert.stat.exists or certbot_result.changed
      register: nginx_config

    - name: Reload nginx with final configuration
      service:
        name: nginx
        state: reloaded
      when: nginx_config.changed

    - name: Setup auto-renewal cron job
      cron:
        name: "Let's Encrypt renewal for {{ domain_name }}"
        job: "certbot renew --quiet --webroot --webroot-path /var/www/letsencrypt --post-hook 'systemctl reload nginx'"
        hour: "2"
        minute: "30"
        weekday: "1"
        state: present

    # ===== STATUS CHECK =====
    - name: Check all services status
      command: supervisorctl status
      register: service_status
      changed_when: false
      failed_when: false
    
    - name: Check our service status
      shell: |
        supervisorctl status | grep -E "^{{ app_name }}(-celery)?\s" || true
      register: our_services
      changed_when: false
      failed_when: false

    - name: Test certificate renewal
      command: certbot renew --dry-run --non-interactive
      register: renewal_test
      changed_when: false
      failed_when: false
      ignore_errors: yes

    - name: Display deployment status
      debug:
        msg: |
          ========================================
          ‚úÖ DEPLOYMENT COMPLETE
          ========================================
          
          üåê LIVE URL: https://{{ domain_name }}
          
          Our Services:
          {{ our_services.stdout }}
          
          All Services (INFO only - other services may be unrelated):
          {{ service_status.stdout }}
          
          SSL Certificate: {{ 'Installed' if (ssl_cert.stat.exists or certbot_result.changed) else 'Not installed' }}
          Auto-renewal: {{ 'Working' if (renewal_test.rc | default(1) == 0) else 'Check manually' }}
          
          Changes Applied:
          - Code updated: {{ git_result.changed }}
          - Config updated: {{ env_result.changed }}
          - Database migrated: {{ git_result.changed or env_result.changed }}
          
          ========================================
          
          üîó Access your site at: https://{{ domain_name }}
          ========================================
    
    - name: Final message with URL
      debug:
        msg: |
          
          ‚ú® READY TO TEST! Open in your browser:
          
          üëâ https://{{ domain_name }}
          
          