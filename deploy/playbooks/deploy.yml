---
- name: Deploy Linked Claims Extraction Service
  hosts: webservers
  become: yes
  vars_files:
    - ../group_vars/webservers.yml
  
  tasks:
    - name: "Check available Python versions"
      shell: "ls /usr/bin/python3* || true"
      register: python_versions
      changed_when: false

    - name: "Display available Python versions"
      debug:
        var: python_versions.stdout_lines

    - name: "Ensure Python 3 and pip are installed"
      apt:
        name: 
          - python3
          - python3-venv
          - python3-dev
          - python3-pip
        state: present
        update_cache: yes

    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    - name: Create .ssh directory for deploy key
      file:
        path: "/home/{{ app_user }}/.ssh"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0700'

    - name: Copy deploy key if provided
      copy:
        content: "{{ github_deploy_key }}"
        dest: "/home/{{ app_user }}/.ssh/id_rsa_deploy"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      when: github_deploy_key is defined

    - name: Configure SSH for GitHub
      copy:
        content: |
          Host github.com
            HostName github.com
            User git
            IdentityFile ~/.ssh/id_rsa_deploy
            StrictHostKeyChecking no
        dest: "/home/{{ app_user }}/.ssh/config"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      when: github_deploy_key is defined

    - name: Pull latest code
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}"
        version: "{{ git_branch | default('main') }}"
        accept_hostkey: yes
        force: yes
      become_user: "{{ app_user }}"

    - name: "Create virtual environment"
      command: "python3 -m venv {{ app_dir }}/venv"
      args:
        creates: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"

    - name: Copy .env file
      template:
        src: env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
        virtualenv_python: python3
      become_user: "{{ app_user }}"

    - name: Create uploads directory
      file:
        path: "{{ app_dir }}/src/uploads"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Check if old systemd service exists
      stat:
        path: /etc/systemd/system/extraction-service.service
      register: old_systemd_service

    - name: Stop old systemd service if running
      systemd:
        name: extraction-service
        state: stopped
      when: old_systemd_service.stat.exists
      ignore_errors: yes

    - name: Remove old systemd service file
      file:
        path: /etc/systemd/system/extraction-service.service
        state: absent
      when: old_systemd_service.stat.exists
      
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      when: old_systemd_service.stat.exists

    - name: Deploy supervisor configuration
      template:
        src: supervisor.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}.conf
        owner: root
        group: root
        mode: 0644

    - name: Reread supervisor configs
      command: supervisorctl reread
      
    - name: Update supervisor
      command: supervisorctl update

    - name: Check if SSL certificate exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
      register: ssl_cert

    - name: Create Nginx site configuration (HTTPS)
      template:
        src: nginx-site-https.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: ssl_cert.stat.exists
      notify: reload nginx

    - name: Create Nginx site configuration (HTTP)
      template:
        src: nginx-site-http.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: not ssl_cert.stat.exists
      notify: reload nginx

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}"
        state: link
      notify: reload nginx

    - name: Check supervisor status
      command: supervisorctl status {{ app_name }}
      register: service_status
      failed_when: false

    - name: Display service status
      debug:
        msg: "Service status: {{ service_status.stdout }} - Check https://{{ domain_name }}"

  handlers:
    - name: restart extraction service
      supervisorctl:
        name: "{{ app_name }}"
        state: restarted

    - name: reload nginx
      service:
        name: nginx
        state: reloaded
