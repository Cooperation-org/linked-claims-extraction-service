---
- name: Deploy Linked Claims Extraction Service with Background Processing
  hosts: webservers
  become: yes
  vars_files:
    - ../group_vars/webservers.yml
  
  tasks:
    - name: Check if PostgreSQL is already installed
      command: which psql
      register: postgres_check
      failed_when: false
      changed_when: false

    - name: Install system dependencies (without PostgreSQL if already exists)
      apt:
        name:
          - python3
          - python3-venv
          - python3-dev
          - python3-pip
          - python3-psycopg2
          - redis-server
          - supervisor
          - nginx
          - git
          - build-essential
          - libpq-dev
        state: present
        update_cache: yes

    - name: Install PostgreSQL only if not present
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present
      when: postgres_check.rc != 0

    - name: Ensure Redis is running
      systemd:
        name: redis-server
        state: started
        enabled: yes

    - name: Check PostgreSQL service status
      systemd:
        name: postgresql
        state: started
        enabled: yes
      register: postgres_service
      failed_when: false

    - name: Check PostgreSQL service (alternative name)
      systemd:
        name: postgresql@*
        state: started
        enabled: yes
      when: postgres_service.failed | default(false)
      failed_when: false

    - name: Create PostgreSQL database user
      postgresql_user:
        name: "{{ db_user | default('linkedclaims') }}"
        password: "{{ db_password }}"
        state: present
      become_user: postgres

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ db_name | default('linkedclaims_extraction') }}"
        owner: "{{ db_user | default('linkedclaims') }}"
        state: present
      become_user: postgres

    - name: Grant all privileges on database to user
      postgresql_privs:
        db: "{{ db_name | default('linkedclaims_extraction') }}"
        role: "{{ db_user | default('linkedclaims') }}"
        type: database
        privs: ALL
      become_user: postgres

    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "/home/{{ app_user }}"
        create_home: yes
        state: present

    - name: Pull latest code
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}"
        version: "{{ git_branch | default('main') }}"
        accept_hostkey: yes
        force: yes
      become_user: "{{ app_user }}"

    - name: Create virtual environment
      command: "python3 -m venv {{ app_dir }}/venv"
      args:
        creates: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"

    - name: Copy .env file with database config
      template:
        src: env-with-db.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
        virtualenv_python: python3
      become_user: "{{ app_user }}"

    - name: Create uploads directory
      file:
        path: "{{ app_dir }}/src/uploads"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Initialize database with Flask-Migrate
      shell: |
        cd {{ app_dir }}
        source venv/bin/activate
        export FLASK_APP=src/app_new.py
        flask db init || true
        flask db migrate -m "Initial migration" || true
        flask db upgrade
      become_user: "{{ app_user }}"
      environment:
        DATABASE_URL: "postgresql://{{ db_user | default('linkedclaims') }}:{{ db_password }}@localhost/{{ db_name | default('linkedclaims_extraction') }}"

    - name: Deploy supervisor configuration for Flask app
      template:
        src: supervisor-flask.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}.conf
        owner: root
        group: root
        mode: '0644'

    - name: Deploy supervisor configuration for Celery worker
      template:
        src: supervisor-celery.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}-celery.conf
        owner: root
        group: root
        mode: '0644'

    - name: Deploy supervisor configuration for Celery beat (optional)
      template:
        src: supervisor-celery-beat.conf.j2
        dest: /etc/supervisor/conf.d/{{ app_name }}-celery-beat.conf
        owner: root
        group: root
        mode: '0644'
      when: enable_celery_beat | default(false)

    - name: Reread supervisor configs
      command: supervisorctl reread
      
    - name: Update supervisor
      command: supervisorctl update

    - name: Restart all services
      supervisorctl:
        name: "{{ item }}"
        state: restarted
      loop:
        - "{{ app_name }}"
        - "{{ app_name }}-celery"

    - name: Check if SSL certificate exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}/fullchain.pem"
      register: ssl_cert

    - name: Create Nginx site configuration (HTTPS)
      template:
        src: nginx-site-https.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: ssl_cert.stat.exists
      notify: reload nginx

    - name: Create Nginx site configuration (HTTP)
      template:
        src: nginx-site-http.conf.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}"
        mode: '0644'
      when: not ssl_cert.stat.exists
      notify: reload nginx

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}"
        state: link
      notify: reload nginx

    - name: Check service status
      command: supervisorctl status
      register: service_status
      failed_when: false

    - name: Display service status
      debug:
        msg: "Service status: {{ service_status.stdout }}"

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded